// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4579.testRobot2018.subsystems;

import org.usfirst.frc4579.testRobot2018.RobotMap;
import org.usfirst.frc4579.testRobot2018.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Timer;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.Jaguar;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class arms extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController centerMotor = RobotMap.armscenterMotor;
    private final SpeedController leftGripper = RobotMap.armsleftGripper;
    private final SpeedController rightGripper = RobotMap.armsrightGripper;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    boolean firstOpen = true;
    boolean holding = false;
    DigitalInput boxSwitch = new DigitalInput(3);
    
    //----------------- Methods for the Movement Motor -----------------------//
    // Used to make the first time that the robot
    public boolean isFirstOpen(){
    	if(firstOpen){
    		firstOpen = false;
    		return true;
    	}
    	return firstOpen;
    }
    
    // Opens the gripper
    public void openGripper(){
    	centerMotor.set(-.75);
    }
    
    // Closes the gripper
    public void closeGripper(){
    	centerMotor.set(.75);
    }
    
    //----------------------- Methods for Holdng the Cube ------------------------//
    public boolean isHolding(){
    	return holding;
    }
    
    
    // Toggles whether the robot should hold the cube or not
    public void changeHold(){
    	holding = !holding;
    }
    
    // Has the arm hold the box
    public void holdingBox(){
    	if(holding)centerMotor.set(-.1);
    }
    
    // Stops the movement motor
    public void stopMovement(){
    	centerMotor.set(0);
    }
    
    
    //-------------------Methods for the Left Motor -----------------------//
    public void moveLeft(double speed){
    	// Runs the left motor in one direction
    	leftGripper.set(speed * -1.0);
    }
    
    public void stopLeft(){
    	// This stops the left gripper motor
    	leftGripper.stopMotor();
    }
    
    
    
    //------------------ Methods for the Right Motor ---------------------//
    public void moveRight(double speed){
    	// Runs the right motor in one direction
    	rightGripper.set(speed);
    }
    
    public void stopRight(){
    	// This stops the right gripper motor
    	rightGripper.stopMotor();
    }
    
    //------------------ Methods for Ejecting the Cube --------------------//
    public void eject(double speed){
    	// Runs both motors in the other direction
    	rightGripper.set(speed * -1.0);
    	leftGripper.set(speed);
    }
    
    //------------------ Reset Method --------------------------//
    
    public void reset(){
    	firstOpen = true;
    	holding = false;
    	closeGripper();
    	Timer.delay(2);
    	stopMovement();
    }
    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

