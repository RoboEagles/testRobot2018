// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4579.testRobot2018.commands;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc4579.testRobot2018.Robot;

/**
 *
 */
public class sideAuto extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
	
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public sideAuto() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

	public int step,
				straightLocation;
	public double turnLocation,
					targetAngle;
	public double[] directions;
	
	Timer timer = new Timer();
	
    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    	step = 0;
    	turnLocation = 0.0;
    	
    	if(false){
    		directions = new double[] {2,-90,.5,90,1,0};  
    	}
    	else {
        	directions = new double[] {8,0};
    	}
    	
    	timer.reset();
    	timer.start();
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
    	
    	//System.out.println("Side Auto Running       " + turnLocation);
    	
    	// The part of the code where it drives straight
    	if(step%2 == 0){
    		
    		// Drives the robot straight until it reaches the goal
    		if(timer.get() < directions[step]){
    			Robot.driveTrain.driveStraightReference(.3,turnLocation);
    		}
    		
    		else if (timer.get() >= directions[step]){
    			// Resets the timer so that the next run will start at 0 seconds
    			timer.stop();
    			timer.reset();
    			
    			// Stops the driveTrain
    			Robot.driveTrain.stop();
    			
    			// Updates which part of the path it is at
    			step++;
    			
    			targetAngle = turnLocation + directions[step];
    		}
    	}
    	
    	// The part of the code where it is turning
    	else if (step%2 == 1){
    		// The robots distance from its goal
    		double distance = targetAngle - turnLocation;
    		if(Math.abs(distance) > .5){
    			// Turns the robot
    			Robot.driveTrain.joeyAutoDrive(0, (-0.8 * Math.signum(directions[step])));
    			
    			// Updates the robots current angle
    			turnLocation = Robot.measurement.getAngle();
    			
    		}
    		else {
    			// Stops and updates where the robot is in the path
    			Robot.driveTrain.stop();
    			timer.start();
    			timer.reset();
    			step++;
    		}
    	}
    	
    	SmartDashboard.putNumber("Real Angle: ", Robot.measurement.getRobotAngle());
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return directions[step] == 0;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    	Robot.driveTrain.stop();
    	System.out.println("Side Auto End*****");
    	step = 0;
    	turnLocation = 0;
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    	end();
    }
}
