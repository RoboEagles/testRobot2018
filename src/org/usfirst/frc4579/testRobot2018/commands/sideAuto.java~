// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4579.testRobot2018.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc4579.testRobot2018.Robot;

/**
 *
 */
public class sideAuto extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
	
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public sideAuto() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

	public int direction,
				step = 1,
				straightStep = 0,
				turnStep = 0,
				straightLocation;
	public double turnLocation;
	public boolean endAuto;
	
	public int[] straightDirections = {600,200};
	public int[] turnDirections = {90,0};
	
    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    	if(autonomous.sideSwitch.get()){
    		direction = 1;
    	}
    	else{
    		direction = -1;
    	}
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
    	
    	// Checks if it has run through all the directions
    	if(straightDirections.length + turnDirections.length < step){
    		endAuto = true;
    	}
    	
    	// Alternates between when it is tuning and when it is driving straight
    	
    	// The part of the code where it drives straight
    	else if(step%2 == 1){
    		if(straightDirections[straightStep] != straightLocation){
    			Robot.driveTrain.driveStraight(.3);
    			straightLocation = Robot.measurement.getFlowMotionX();
    		}
    		else{
    			Robot.driveTrain.stop();
    			straightStep++;
    			step++;
    		}
    	}
    	
    	// The part of the code where it is turning
    	else{
    		if(turnDirections[turnStep-1]*direction <= turnLocation){
    			Robot.driveTrain.joeyAutoDrive(0, .3*direction);
    			turnLocation = Robot.measurement.getAngle();
    		}
    		else{
    			Robot.driveTrain.stop();
    			turnStep++;
    			step++;
    		}
    	}
    	
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return endAuto;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    	Robot.driveTrain.stop();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    	end();
    }
}
