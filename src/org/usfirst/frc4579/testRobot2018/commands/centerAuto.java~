// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4579.testRobot2018.commands;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc4579.testRobot2018.Robot;

/**
 *
 */
public class centerAuto extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public centerAuto() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    double speed = 0.0;
    int count = 0;
	int targetCount = 53100;
	int slowTargetCount = targetCount - (60 * 90);
	double increment = 0.005;

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    	setTimeout(10);
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
//    	Robot.measurement.measure();
//    	Robot.measurement.getCounts();
    	count = Robot.measurement.getFlowMotionX();
//    	System.out.print(Robot.measurement.getX());
//    	System.out.print("\t");
//    	System.out.print(Robot.measurement.getY());
//    	System.out.print("   \t");
//    	System.out.print(Robot.measurement.getRateX());
//    	System.out.print("\t");
    	System.out.print("Flow Motion X: ");
    	System.out.println(count);
    	
    	if (count > slowTargetCount) {
    		increment = -0.005;
    		System.out.println("*** Slowing...");
    	}
    	
    	speed = Math.max(1, Math.min(0.3, speed + increment));
    	Robot.driveTrain.driveStraight(.3);
    	
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
    	if (count >= targetCount) System.out.println("Target Reached ******");
    	return (isTimedOut() | count >= targetCount);
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    	Robot.driveTrain.stop();
    	Robot.measurement.resetFlowMotion();
    	System.out.println(Timer.getFPGATimestamp());
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    	end();
    }
}
